---
title:  "Fitting a logistic curve"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(palmerpenguins)
theme_set(theme_minimal())
```



## Logistic growth - review

Remember this equation from the Simple Population Models section?

$N_t = N_{t-1} + rN_{t-1}(1-N_{t-1}/K)$

Let's review.

-   What is the functional form?

-   What are the parameters?

-   What does each parameter control?

### Fitting a logistic growth curve to elephant data

In this section, building on the basics we have learned on how statistical models are fit, we are going to fit a non-linear model. The model describes logistic growth of an elephant population. Note: here we use sum of squares as our objective function, which is not the best way to fit a non-linear model, but is used for demonstration.

Take a look at [this website](https://ecosystem-project.com/epopulationgrowth) below to get familiar with the system. Then continue with the exercise.

### Exercise

```{r, echo = TRUE}

Yrs<-c(1903, 1905, 1907, 1926, 1928, 1932, 1935, 1939, 1946, 1948, 1961, 1964, 1967, 1970, 1972, 1974, 1976, 1979, 1982, 1985, 1988, 1990, 1993, 1996)
Data<-c(12, 15, 17, 25, 27, 30, 37, 42, 52, 108, 156, 219, 7563, 8642, 7378, 7245, 6983, 7367, 7689, 8503, 7654, 6803, 7204, 7343)
length(Yrs); length(Data)

#pars, Years, and Numbers are vector arguments
LogisticGrowthModel<-function(pars, Years, Numbers, ReturnResults=F){
  
  #print(Years)
  
  KK<-pars[1]; rr<-pars[2]; BB<-pars[3]#assign parameters
  
  TT<-Years[1]:Years[length(Years)] #stretch out years within model so no missing years

  #print(TT)
  
  PP<-vector(mode = "numeric", length = length(TT));  #empty population size vector
  
  DD<-vector(mode = "numeric", length = length(TT)); #empty population growth vector
  
  II<-rr*BB*(1-BB/KK) #initial growth to reach year 1 from year 0
  
  PP[1]<-BB+II # population assignment at year 1, based on parameter BB (initial population)
  
  for(i in 2:length(PP)){ 
    
    DD[i-1] <- rr*PP[i-1]*(1-PP[i-1]/KK); #this is dN/dt - amount the population grows based
    #on conditions in the previous time step
    
    PP[i] <- PP[i-1] + DD[i-1] #update population size
    
    } 

  #print(DD)
  #print(PP)
  
   Predictions<-data.frame(Years = TT, Pred = PP); #create predictions
   
   Observations<-data.frame(Years, Numbers) #store observations in data frame
   
   Results<-merge(Predictions, Observations, by = "Years") #match Predictions and Observations by Year
  
   SS<-sum((Results$Numbers - Results$Pred)^2) #calculate sum of squares: sum((obs - pred)^2)
  
   #print('Results')
   #print(Results)
  if(ReturnResults==T){ return(list(Predictions, SS))} else {return(SS)}
   #controls options for what is returned from function

   }

#LogisticGrowthModel(c(7500,0.5), Yrs, Data, t=0, ReturnResults=T) ERROR
LogisticGrowthModel(c(7500,0.5,1), Years=Yrs, Numbers=Data, ReturnResults=T)


```

Now we would like to fit this model by minimizing the objective function using algorithms implemented in the 'optim' function.

```{r, eval = FALSE, echo = TRUE}
?optim
# this function tries different parameter values to minimize the output of 
#LogisticGrowthModel. The output is the sum of squares.
```

```{r, echo = TRUE}

OptPars1<-optim(c(7500,0.5,1), LogisticGrowthModel, method = 'L-BFGS-B', Years = Yrs, Numbers = Data, lower = c(2000, 0,0.8), upper = c(10000, 1,100), control = list(maxit = 50000))
OptPars1

OptPars2<-optim(c(7500,0.5,1), LogisticGrowthModel, Years = Yrs, Numbers = Data, control = list(maxit = 50000))
OptPars2

Predictions1<-LogisticGrowthModel(OptPars1$par, Yrs, Data, ReturnResults=T)[[1]]
Predictions2<-LogisticGrowthModel(OptPars2$par, Yrs, Data, ReturnResults=T)[[1]]

#tibble(Yrs, Data) %>% 
#  ggplot(aes(Yrs, Data)) + geom_point(shape = '*', color = 'red', size = 5) + ylim(0,8000)


tibble(Yrs, Data) %>% 
  ggplot(aes(Yrs, Data)) + geom_point(shape = '*', color = 'red', size = 5) + ylim(0,8000) + geom_line(aes(Years, Pred), data = Predictions1) + geom_line(aes(Years, Pred), data = Predictions2, linetype = 2)

```

```{r, echo = TRUE}
# Now try to figure out the best time lag as shown in the on-line example. 
# Hint: plot SS as it relates to the time lag value. SS is your sums of 
# squares, so the value with the lowest sum of squares is the one you want. 
# Try lag values of 0 - 5. To include a lag, use the next function instead. 
# Note that there is now an additional parameter for lag t.

LogisticGrowthModelLag<-function(pars, Years, Numbers, t=0, ReturnResults=F){
  KK<-pars[1]; rr<-pars[2]; BB<-pars[3]
  TT<-Years[1]:Years[length(Years)]
  PP<-vector(mode = "numeric", length = length(TT));
  DD<-vector(mode = "numeric", length = length(TT)); 
  II<-rr*BB*(1-BB/KK)
  PP[1]<-BB+II
  
  #implementing Logistic Growth for Years with no lagged Numbers data
  if(t>0){
    for(i in 2:(t+1)){ 
      DD[i-1]<- rr*PP[i-1]*(1-PP[i-1]/KK);
      PP[i]<-PP[i-1] + DD[i-1]
    }
  }
  
  #implementing Lagged growth
  for(i in (t+2):length(PP)){ 
    DD[i-1]<- rr*PP[i-1]*(1-PP[i-1-t]/KK); 
    PP[i]<-PP[i-1] + DD[i-1]
  }
  
  #print(PP) 
  Predictions<-data.frame(Years = TT, Pred = PP); Observations<-data.frame(Years, Numbers)
  Results<-merge(Predictions, Observations, by = "Years")
  SS<-sum((Results$Numbers - Results$Pred)^2)
  if(ReturnResults==T){ return(list(Predictions, SS))} else {return(ifelse(is.infinite(SS), 10000000000, SS))}
}

LogisticGrowthModelLag(OptPars1$par, t=3,Yrs, Data, ReturnResults=T)
LogisticGrowthModelLag(OptPars2$par, t=3,Yrs, Data, ReturnResults=T)

SS1<-SS2<-vector(mode = "numeric", length = 7)
OptPars1_list<-OptPars2_list<-NULL

for(i in 0:6){
  OptPars1_list[[i+1]]<-try(optim(OptPars1$par, fn=LogisticGrowthModelLag, t=i, method = 'L-BFGS-B', Years = Yrs, Numbers = Data, lower = c(2000, 0,0.8), upper = c(10000, 1,100), control = list(maxit = 50000)), silent=T)
  OptPars2_list[[i+1]]<-try(optim(OptPars2$par, fn=LogisticGrowthModelLag, t=i, Years = Yrs, Numbers = Data, control = list(maxit = 50000)),silent=T)
  SS1[i+1]<-try(OptPars1_list[[i+1]]$value/1000000,silent=T )
  SS2[i+1]<-try(OptPars2_list[[i+1]]$value/1000000,silent=T )
}

SS1 
SS2 

```

```{r, echo = TRUE}
#Q - The time lag corresponding with the minimum SS is the best. What is time lag is that?
#That is, which would you choose if the best model by least squares (SS)?



tibble(lags=c(0:6), SS=SS1) %>% 
  mutate(type = 'SS1') %>% 
  bind_rows(tibble(lags=c(0:6), SS=ifelse(grepl('Error', SS2), NA_real_, as.numeric(SS2))) %>% 
  mutate(type = 'SS2')) %>% 
  group_by(type) %>% 
  ggplot(aes(lags, SS)) + geom_point() + facet_wrap(~type)

```

```{r, echo = TRUE}

#Q - BUT, this is what happens with lag = 5. Why? (Compare plots with lag = 0 - 4)

OptPars<-NULL

OptPars<-optim(c(7500,0.5,1), LogisticGrowthModelLag, t=5, Years = Yrs, Numbers = Data)

Predictions<-LogisticGrowthModelLag(c(OptPars$par), t=5,Yrs, Data, ReturnResults=T)[[1]]
Predictions2<-LogisticGrowthModelLag(c(OptPars1_list[[6]]$par), t=6-1,Yrs, Data, ReturnResults=T)[[1]]

L5 <- tibble(Yrs, Data) %>% ggplot(aes(Yrs, Data)) + geom_point(shape = "*", color = "red", size = 5) + ylim(-1,9000) + geom_line(aes(Years, Pred), data = Predictions, lty = 2) + ggtitle('Lag 5') + geom_line(aes(Years, Pred), data = Predictions2, lty = 1)

LogisticGrowthModelLag(OptPars2$par, t=5,Yrs, Data, ReturnResults=T)


#...compared with lag = 3
OptPars<-NULL
OptPars<-optim(c(7500,0.5,1), LogisticGrowthModelLag, t=3, Years = Yrs, Numbers = Data)
Predictions<-LogisticGrowthModelLag(c(OptPars$par), t=3,Yrs, Data, ReturnResults=T)[[1]]
Predictions2<-LogisticGrowthModelLag(c(OptPars1_list[[4]]$par), t=4-1,Yrs, Data, ReturnResults=T)[[1]]
L3 <- tibble(Yrs,Data) %>% ggplot(aes(Yrs, Data)) + geom_point(shape = "*", color = "red", size = 5) + ylim(-1,9000) + geom_line(aes(Years, Pred), data = Predictions, lty = 2) + ggtitle('Lag 3') + geom_line(aes(Years, Pred), data = Predictions2, lty = 1)

#...and no lag = 0
OptPars<-NULL
OptPars<-optim(c(7500,0.5,1), LogisticGrowthModelLag, t=0, Years = Yrs, Numbers = Data)
Predictions<-LogisticGrowthModelLag(c(OptPars$par), t=0,Yrs, Data, ReturnResults=T)[[1]]
Predictions2<-LogisticGrowthModelLag(c(OptPars1_list[[1]]$par), t=1-1,Yrs, Data, ReturnResults=T)[[1]]
L0 <- tibble(Yrs, Data) %>% ggplot(aes(Yrs, Data)) + geom_point(shape = "*", color = "red", size = 5) + ylim(-1,9000) + geom_line(aes(Years, Pred), data = Predictions, lty = 2) + ggtitle('Lag 0') + geom_line(aes(Years, Pred), data = Predictions2, lty = 1)


#Q - Which one fits the data best?
gridExtra::grid.arrange(L5, L3, L0, ncol = 3)

```

### TAKE HOME MESSAGES 

+ The optimizer matters

+ The starting values matter

+ The biology matters
